데이터베이스 : 
특정 기업/조직/개인이 필요에 의해 데이터를 일정한 형태로 저장해 놓은 것

DBMS :
효율적인 데이터 관리/데이터 손상 피하기/데이터 복구하기 위한 시스템
보안 기능 제공
실수로 조건 위배되는 데이터 입력, 관계 연결하는 중요한 데이터 삭제 방지하여 데이터 무결성 보장 
갑작스런 시스템 장애로부터 입력/수정/삭제하던 데이터가 제대로 반영될 수 있도록 보장하는 기능, 시스템 다운/재해 등의 상황에서도 데이터를 회복/복구할수 있는 기능 제공

관계형 데이터베이스 :
정규화를 통해 이상현상을 제거하고 데이터 중복 피하며, 동시성 관리, 병행 제어를 통해 많은 사용들이 동시에 데이터를 공유 및 조작 가능하게끔 하는 기능 제공

SQL(Structured Query Language):
관계형 데이터베이스에서 데이터 정의/조작/제어하는 언어
특정 데이터 집합에서 필요한 데이터를 꺼내 조회,
새로운 데이터를 입력/수정/삭제

SQL 종류 :
1. 데이터 조작어(DML: Data Manipulation Language) 
SELECT
INSERT,UPDATE,DELETE
2. 데이터 정의어(DDL: Data Definition Language)
CREATE, ALTER, DROP, RENAME
3. 데이터 제어어(DCL: Data Control Language)
GRANT, REVOKE
4. 트랜잭션 제어어(TCL: Transaction Control Language)
COMMIT, ROLLBACK

테이블 : 
칼럼과 행의 2차원 구조
칼럼과 행이 겹치는 하나의 공간을 필드라 한다.

ERD(Entity Relationship Diagram) : 
테이블 간 서로 상관관계를 그림으로 도식한 것
ERD의 구성요소는 엔터티, 관계, 속성이며 현실 세계 데이터는 이 3가지 구성요소로 모두 표현 가능

주요 데이터 유형 정리
CHAR(L) : 고정 길이 문자열, 변수 값이 L보다 작을 경우 공백으로 채워짐
VARCHAR2(L) : 가변 길이 문자열, L보다 작을 경우 해당 값만큼만 공간 차지
NUMBER(L,D) : 정수, 실수 저장. L은 전체자리 수, D는 소숫점 자리 수
DATE : 날짜와 시각정보 "년월일시분초" 표현

선언한 유형이 아닌 다른 유형 들어오려할 시 에러 발생

DROP TABLE SQLD.TB_DEPT_TEMP PURGE; --PURGE는 SHIFT누르고 DELETE하는 효과 보여줌

CREATE TABLE SQLD.TB_DEPT_TEMP
(
DEPT_CO CHAR(6) NOT NULL
,DEPT_NM VARCHAR(150) NOT NULL
,UPPER_DEPT_CD CHAR(6)
);

테이블 명은 단수형, 중복X, 컬럼 명 중복X, 테이블 생성문은 반드시 ;로 끝나야함
테이블 유형은 반드시 지정
테이블 명/칼럼 명은 반드시 문자로 시작
A-Z,a_z,0-9,_,$,#문자만 허용 (외우기!!)

제약조건(CONSTRAINT) : 원하는 조건의 데이터만 유지하기 생성함
데이터 무결성 유지하기 위한 특정 칼럼에 설정하는 제약

제약조건 종류 :
기본 키(Primary Key): 테이블 저장된 행 고유하게 식별하기 위함
하나의 테이블에 단 하나의 기본 키만 정의 가능
기본 키 생성 시 DBMS는 자동으로 UNIQUE인덱스 생성
pk는 null입력 불가

고유 키(Unique Key): 테이블에 저장된 행 데이터 고유하게 식별하기 위함
null 입력 가능

NOT NULL : null 입력 금지 명시적으로 표현

CHECK : 입력할 수 있는 값 종류 및 범위 제한

외래 키(Foreign Key): 다른 테이블의 pk를 외래 키로 지정하는 경우(참조무결성제약조건), 여러개 지정 가능, NULL값 가질 수 있다, 테이블 생성 시 설정 가능.

DEFAULT : NULL값이 들어올 경우 입력되지 않고, 정의된 기본 값이 자동으로 입력

ALTER TABLE : 칼럼을 추가/삭제하거나 제약조건을 추가/삭제하는 작업

1. ADD COLUMN
ALTER TABLE SQLD.TB_EMP_TEMP ADD (MARRIED_YN CHAR(1));

2. DROP COLUMN
ALTER TABLE SQLD.TP_EMP_TEMP DROP COLUMN MARRIED_YN;

3. MODIFY COLUMN
ALTER TABLE SQLD.TB_EMP_TEMP ADD (MARRIED_YN CHAR(1));
ALTER TABLE SQLD.TB_EMP_TEMP MODIFY (MARRIED_YN CHAR(1) DEFAULT 'N' NOT NULL NOVALIDATE);
ALTER TABLE SQLD.TB_EMP_TEMP DROP COLUMN MARRIED_YN;

4. RENAME COLUMN (ORACLE 등 일부 DBMS에서만 지원)
CREATE TABLE SQLD.TB_EMP_TEMP_2
AS SELECT * FROM SQLD.TB_EMP_TEMP; --테이블 복제

ALTER TABLE SQLD.TB_EMP_TEMP_2
RENAME COLUMN TEL_NO TO PHONE_NO

5. DROP CONSTRAINT
ALTER TABLE SQLD.TB_EMP_TEMP DROP CONSTRAINT FK_TB_EMP_TEMP_01;

6. ADD CONSTRINAT
ALTER TABLE SQLD.TP_DEPT_TEMP ADD CONSTRAINT PK_TB_DEPT_TEMP PRIMARY KEY(DEPT_CD);
:SQLD.TP_DEPT_TEMP의 DEPT_CD 칼럼을 PK로 제약한다.

ALTER TABLE SQLD.TB.EMP_TEMP ADD CONSTRAINT FK_TB_EMP_TEMP_01 FOREIGN KEY(DEPT_CD) REFERENCES SQLD.TP_DEPT_TEMP (DEPT_CD);
: SQLD.TB_EMP_TEMP 테이블에는 DEPT_CD 칼럼이 존재하며 SQLD.TP_DEPT_TEMP 테이블의 DEPT_CD 칼럼을 참조하는 제약조건

RENAME TALBE : 테이블 명 변경
RENAME TB_EMP_TEMP_2 TO TB_EMP_TEMP_3;

TRUNCATE TABLE : 테이블의 데이터를 비운다. TRUNCATE 명령 수행 시 삭제한 데이터 ROLLBACK 불가능
TRUNCATE TABLE SQLD.TB_EMP_TEMP_3;

DROP TABLE : 테이블 제거
DROP TABLE SQLD.TB_EMP_TEMP_3;

DELETE VS TRUNCATE
DELETE는 WHERE절 없으면 TRUNCATE와 동일하게 모든 데이터가 삭제되고 테이블 스키마만 남는 빈 껍데기 형태.
DELETE는 명령어는 데이터 복구가 가능하고, 로그를 남긴다.
DELETE는 데이터 모두 DELETE 해도 Storage 삭제X
TRUNCATE는 최초 테이블 생성 시 할당된 Storage만 남기고 삭제 (테이블 스키마 유지)

사용법) DELETE FROM STUDENT;, TRUNCATE TABLE STUDENT;


DML : INSERT, UPDATE,DELETE
1. INSERT

INSERT INTO SQLD.TP_CERTI T (T.CERTI_CD, T.CERTI_NM, T.ISSUE_INSTI_NM) VALUES ('100021', 'SQLD합격패스', '패스트캠퍼스')
COMMIT;

2. UPDATE

UPDATE SQLD.TP_CERTI A
SET A.ISSUE_INSTI_NM = '패스트캠퍼스온라인'
WHERE A.CERTI_ID = '10021'
COMMIT

3. DELETE : 데이터 지움, 행을 지우지는 않음

DELETE FROM SQLD.TP_CERTI A
WHERE A.CERTI_CD = '10021';
COMMIT;

DUAL 테이블을 이용한 연산 수행
SELECT ((1+1)*3)/6 AS CALC_RESULT --괄호 안"()"부터 연산 수행
FROM DUAL;

TCL : 데이터베이스의 논리적 연산 단위이다.
하나의 트랜잭션에는 하나 이상의 SQL문장이 포함된다. 분할 불가 최소 단위.
전부 적용 혹은 전부 취소한다. 즉, TRANSACTION은 ALL OR NOTHING의 개념

트랜잭션의 특성(ACID 외우기!!) 시험 무조건!!
1.원자성(Atomicity) : 트랜잭션 정의 연산들은 모두 성공적이거나 모두 실패
2.일관성(Consistency) : 트랜잭션 실행 전 데이터베이스 내용이 잘못되어있지 않다면 실행 이후에서 데이터베이스의 내용에 잘못이 있으면 안된다.
3.고립성(Isolation) : 트랜잭션 실행 도중 다른 트랜잭션 영향 받아 잘못된 결과 만들면 안된다.
4.지속성(Durability) : 트랜잭션이 성공적으로 수행되면 그 트랜잭션이 갱신한 데이터베이스의 내용은 영구적으로 저장

잠금(Locking) : 계좌이체는 한 계좌에서 현금이 인출된 후에 다른 계좌로 입금이 되는데 현금이 인출되기 전에 다른 계좌에 입금이 되는 것은 문제를 발생 시킬 수 있다.
이체가 결정되기 전까지는 다른 사람이 이 계좌의 정보를 변경할 수 없다.

COMMIT: 입력/수정/삭제한 자료에 대해서 전혀 문제가 없다고 판단되었을 경우 COMMIT명령어를 통해서 트랜잭션 완료

COMMIT이나 ROLLBACK 이전의 데이터 상태 :
단지 메모리 BUFFER에만 영향 받았기 때문에 복구 가능
현재 사용자는 SELECT문장으로 결과확인가능
다른 사용자는 현재 사용자 수행 명령 결과 확인 불가
변경된 행은 잠금(Locking)설정되어 다른 사용자가 변경 불가

COMMIT이후 상태 :
변경사항이 데이터베이스 반영
이전 데이터는 영구 사라짐
모든 사용자는 결과 확인가능
관련된 행에 대해 잠금(Locking)풀리고, 다른 사용자들이 행 조작 가능

ROLLBACK : 
테이블 내 입력/수정/삭제한 데이터에 대하여 COMMIT이전에는 변경 사항 취소가능한데 데이터베이스에서는 롤백(ROLLBACK) 기능 사용
데이터 변경 사항 취소되어 이전 상태로 복구, 관련된 행에 대한 잠금 풀리고 다른 사용자들이 데이터 변경 가능

INSERT INTO SQLD.TB_CERTI T (T.CERTI_CD, T.CERTI_NM, T.ISSUE_INSTI_NM) VALUES ('10022', 'SQL지식보유자', '패스트캠퍼스');

ROLLBACK; 

SELECT * 
FROM SQLD.TB_CERTI
WHERE A.CERTI_CD = '10022' --데이터 출력 안됨

SAVEPOINT : SAVEPOINT를 정의하면 롤백할 때 트랜잭션에 포함된 전체 작업을 롤백하는것이 아니라 현 시점에서 SAVEPOINT까지 트랜잭션의 일부만 롤백 가능

SAVEPOINT SVPT1;

INSERT INTO SQLD.TB_CERTI T (T.CERTI_CD, T.CERTI_NM, T.ISSUE_INSTI_NM) VALUES ('10022', 'SQL지식보유자', '패스트캠퍼스');

UPDATE SQLD.TB_CERTI
SET CERTI_NM = 'SQL경험보유자'
WHERE CERTI_CD = '10022'
;

ROLLBACK TO SVPT1;

DELETE FROM SQLD.TO_CERTI
WHERE CERTI_CD = '10022' --삭제 실패(데이터 존재하지 않음)
;
 
SELECT * FROM SQLD.TB_CERTI
WHERE CERTI_CE = 10022' --공집합 출력됨
;

트랜잭션 요점 : INSERT,UPDATE,DELETE 수행 시 변경되는 데이터 무결성 보장하는 것이 COMMIT과 ROLLBACK의 목적
커밋은 변경된 데이터를 테이블이 영구적으로 반영해라 라는 의미
롤백은 변경 전으로 복귀하라
저장점은 데이터 변경을 사전에 지정한 저장점까지만 롤백하라

COMMIT,ROLLBACK 처리와는 상관없이 트랜잭션 처리가 일어나는 상황
CREATE,ALTER,DROP,RENAME,TRUNCATE TABLE등 DDL문장을 수행하면 그 전후 시점에 자동 커밋
DML 문장 이후 커밋 없이 DDL문장 실행되면 DDL수행 전에 자동 커밋된다.
데이터베이스를 정상적으로 접속 종료하면 자동으로 트랜잭션이 커밋됨
애플리케이션의 이상 종료로 데이터베이스와의 접속이 단절될 경우 트랜잭션이 자동 롤백됨

함수
문자형 함수
LTRIM : 왼쪽 공백 제거 
RTRIM : 오른쪽 공백 제거

숫자형 함수
MOD : 나머지 반환 ex) MOD(8,3) -> 2반환
ceil : 올림
floor : 버림
round : 반올림 ex) round(38.678, 2) -> 소수점 2번째 자리에서 반올림 38.68반환
trunc : 버림 ex) trunc(38.678,2) -> 2의 자리에서 버림. 38.67반환

날짜형 함수
sysdate : 현재 년월일시분초 출력
to_number(to_char(sysdate, 'YYYY')) --년 출력
이 외에도 'mm','dd','hh24','mi','ss' 옵션 존재

to_char(sysdate, 'mm') --월 출력. 7월이면 07 반환

sysdate - 1 : 1일 뺀 것
sysdate - (1/24) : 1시간을 뺀 것
sysdate - (1/24/60) : 1분을 뺀 것
sysdate - (1/24/60/60) : 1초를 뺀 것

데이터 형 변환 
1. 명시적
2. 암시적

단일행 case 표현 종류
decode(조건1, 값1, 조건2, 값2, 디폴트 값) : 조건1이 true이면 값1, 조건2가 true이면 값2, 아니면 디폴트값

null 연산
null에다 곱셈,뺄셈,덧셈,나눗셈 뭘 하든 null
nvl(direct_manager_emp_no, '최상위자') : 관리자 사원번호가 null이면 '최상위자'로 출력

 nvl(max(emp_nm), '존재안함') : '존재안함' 출력
nvl(emp_nm, '존재안함') : 공집합 출력
MAX(공집합) : NULL 출력
차이 시험 무조건 나옴!!

nullif('박찬호','박지성') : 같지 않으면 '박찬호' 반환
nullif('박찬호','박지성') : null 반환

coalesce(null,null,0) : 널이 아닌 첫번째 값 return. 0반환
coalesce(5000,null,0) : 5000반환

GROUP BY,HAVING

count(*) : NULL 값 포항 행의 수 출력
COUNT(표현식) : 표현식의 값이 NULL이 아닌 행의 수 출력
GROUPBY절은 ALIAS 사용불가

ORDER BY : ALIAS 가능, 오름차순 ,NULL값이 가장 큼,
GROUP BY절과 같이 쓰이는 ORDER BY는 일반 칼럼을 사용할 수 없음!!!
즉, GROUP BY 절에 사용되는 칼럼 사용해야함
GROUP BY절 사용시 SELECT절에 정의되지 않은 집계 칼럼을 ORDER BY 절에 사용가능

SELECT문 실행 순서
FROM, WHERE, GROUP BY, HAVING, SELECT, ORDER BY 순

WHERE절 집계함수 X

SELECT EMP_NM, EMP_NO, DEPT_CD, DEPT_NM --두 테이블 모두 DEPT_CD를 가지고 있으므로 ALIAS를 지정 안 해 주었기 때문에 실패한 SQL문이다.
FROM TB_EMP A, TB_DEPT B
WHERE A.DEPT_CD = B.DEPT_CD
ORDER BY BIRTH_DE

<시험문제>
NULL 정리
NULL은 아직 정의되지 않은 값. 0혹은 공백이 아니다
사칙연산하면 다 NULL이다.
NULL은 오직 IS NULL, IS NOT NULL로만 검색가능 (<>, = 등은 사용불가)
NULL은 집계연산에서 제외된다.


